const { BCheckout, BCheckoutItem, User, Shipping } = require("../models/models");
const jwt = require("jsonwebtoken");
const ApiError = require("../error/ApiError");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const FormData = require('form-data'); 

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

class BCheckoutController {
  async create(req, res, next) {
    try {
      const { name, phone, tg, address, price, shippingId, json } = req.body;

      if (!name || !phone || !address || !price || !shippingId || !json) {
        return next(ApiError.badRequest("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"));
      }

      const token = req.headers.authorization.split(' ')[1];
      const userId = jwt.verify(token, process.env.SECRET_KEY).id;

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤
      const checkout = await BCheckout.create({
        name,
        phone,
        tg,
        address,
        price,
        shippingId,
        userId,
        cartId: null
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å JSON —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
      const checkoutItem = await BCheckoutItem.create({
        bCheckoutId: checkout.id,
        json
      });

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const user = await User.findByPk(userId);
      const shipping = await Shipping.findByPk(shippingId);

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      let message = `üß© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ ‚Ññ${checkout.id}\n\n`;
      message += `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${name}\n`;
      message += `üìß Email: ${user.email}\n`;
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n`;
      message += `‚úàÔ∏è Telegram: ${tg}\n`;
      message += `üè° –ê–¥—Ä–µ—Å: ${address}\n`;
      message += `üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${shipping?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `\nüí∞ –ò—Ç–æ–≥–æ: ${price} —Ä—É–±.\n`;

    
               // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
               await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
                   chat_id: TELEGRAM_CHAT_ID,
                   text: message,
                   reply_markup: {
                       inline_keyboard: [
                           [
                               {
                                   text: "–û—Ç–≤–µ—Ç–∏—Ç—å –≤ Telegram",
                                   url: `https://t.me/${tg.replace('@', '')}`
                               }
                           ]
                       ]
                   }
               });

      return res.json({
        success: true,
        bCheckoutId: checkout.id,
        itemId: checkoutItem.id
      });

    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞-–∑–∞–∫–∞–∑–∞:", e);
      return next(ApiError.badRequest(e.message));
    }
  }
}

module.exports = new BCheckoutController();
