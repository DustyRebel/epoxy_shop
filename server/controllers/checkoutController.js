const { Checkout, CheckoutItem, CartItem, Item, User, Shipping } = require('../models/models');
const ApiError = require('../error/ApiError');
const axios = require('axios');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

class CheckoutController {
    async create(req, res, next) {
        try {
            const { name, phone, tg, address, price, userId, shippingId, cartId } = req.body;
            
            const cartItems = await CartItem.findAll({ where: { cartId }, include: [Item] });
            if (!cartItems.length) {
                return next(ApiError.badRequest('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.'));
            }
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            const checkout = await Checkout.create({ name, phone, tg, address, price, cartId, userId, shippingId });

            for (const cartItem of cartItems) {
                await CheckoutItem.create({
                    checkoutId: checkout.id,
                    itemId: cartItem.itemId,
                    quantity: cartItem.quantity
                });
            }

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            await CartItem.destroy({ where: { cartId } });

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const user = await User.findOne({ where: { id: userId } });
            const shipping = await Shipping.findOne({ where: { id: shippingId } }); // <-- –Ω–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            const checkoutItems = await CheckoutItem.findAll({
                where: { checkoutId: checkout.id },
                include: [Item]
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            let message = `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ${checkout.id}\n\n`;
            message += `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${name}\n`;
            message += `üìß Email: ${user.email}\n`;
            message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n`;
            message += `‚úàÔ∏è Telegram: ${tg}\n`;
            message += `üè° –ê–¥—Ä–µ—Å: ${address}\n`;
            message += `üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${shipping.name}\n\n`; // <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º shipping.name
            message += `üõç –¢–æ–≤–∞—Ä—ã:\n`;

            checkoutItems.forEach((item, index) => {
                message += `${index + 1}. ${item.item.name} √ó ${item.quantity}\n`;
            });

            message += `\nüí∞ –ò—Ç–æ–≥–æ: ${price} —Ä—É–±.`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–û—Ç–≤–µ—Ç–∏—Ç—å –≤ Telegram",
                                url: `https://t.me/${tg.replace('@', '')}`
                            }
                        ]
                    ]
                }
            });

            return res.json(checkout);
        } catch (e) {
            next(ApiError.badRequest(e.message));
        }
    }
}

module.exports = new CheckoutController();
